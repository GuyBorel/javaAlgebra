package de.uniwue.jpp.javalgebra;

import de.uniwue.jpp.javalgebra.mengen.RestklassenMenge;
import de.uniwue.jpp.javalgebra.mengen.TupelMenge;

import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

public class StrukturMitEinerVerknuepfung<T> {

    private Menge <T> menge;
    private Abbildung <Tupel <T>, T> verknuepfung;
    private T neutralElement = null;

    public StrukturMitEinerVerknuepfung(Menge <T> menge, Abbildung <Tupel <T>, T> verknuepfung) {
        if (menge.getSize().isEmpty()) {
            throw new IllegalArgumentException("unendliche Menge");
        }
        if (menge.getElements().anyMatch(n -> !menge.contains(verknuepfung.apply(new Tupel <>(n, n))))) {
            throw new IllegalArgumentException("verknuepfung nicht zwei Elemente aus menge");
        }
        this.menge = menge;
        this.verknuepfung = verknuepfung;
    }

    public T apply(T t1, T t2) {
        if (!menge.contains(t1) || !menge.contains(t2)) {
            throw new IllegalArgumentException("t1 oder t2 nicht in menge");
        }
        return verknuepfung.apply(new Tupel <>(t1, t2));
    }

    public boolean isHalbgruppe() {
        List <T> tList = menge.getElements().collect(Collectors.toList());

        for (int i = 0; i < menge.getSize().get(); i++) {
            for (int j = i; j < menge.getSize().get(); j++) {
                for (int k = j; k < menge.getSize().get(); k++) {
                    T a1 = tList.get(i);
                    T a2 = tList.get(j);
                    T a3 = tList.get(k);
                    if (!apply(a1, apply(a2, a3)).equals(apply(apply(a1, a2), a3))) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public boolean isMonoid() {
        List <T> tList = menge.getElements().collect(Collectors.toList());
        if (!isHalbgruppe()) {
            return false;
        }
        T elem = null;
        boolean notNeutral = false, exists = false;
        for (int i = 0; i < menge.getSize().get(); i++) {
            T e = tList.get(i);
            for (int j = i; j < menge.getSize().get(); j++) {
                T a2 = tList.get(j);
                if (!apply(e,a2).equals(a2) && !apply(a2,e).equals(a2)){
                //if (!((apply(e, a2).equals(apply(a2, e))) && (apply(a2, e).equals(a2)) && (apply(e, a2).equals(a2)))) {
                    notNeutral = true;
                    //break;
                }
            }
            if(!notNeutral && exists){
                exists = false;
                //break;
            }
            if(!notNeutral && !e.equals(elem)){
                exists = true;
                neutralElement = e;
            }
            notNeutral = false;
        }
        return exists;
    }

    public T getNeutralesElement() {

        if (isMonoid()) {
            return neutralElement;
        } else {
            throw new UnsupportedOperationException("Struktur kein Monoid");
        }

    }

    public boolean isGruppe() {
        List <T> tList = menge.getElements().collect(Collectors.toList());
        if (menge.getSize().isPresent()) {
            for (int i = 0; i < menge.getSize().get(); i++) {
                for (int j = i; j < menge.getSize().get(); j++) {
                    for (int k = j; k < menge.getSize().get(); k++) {
                        T a = tList.get(i);
                        T b = tList.get(j);
                        T e = tList.get(k);
                        if (!apply(a, b).equals(apply(b, a)) && !apply(a, b).equals(apply(e, e)) && !apply(b, a).equals(apply(e, e))) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }

    public boolean isKommutativ() {
        List <T> tList = menge.getElements().collect(Collectors.toList());

        for (int i = 0; i < menge.getSize().get(); i++) {
            for (int j = i; j < menge.getSize().get(); j++) {
                T a1 = tList.get(i);
                T a2 = tList.get(j);
                if (!apply(a1, a2).equals(apply(a2, a1))) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean isAbelscheGruppe() {
        return isGruppe() && isKommutativ();
    }

    public static void main(String[] args) {

        //Abbildung<Integer,Integer> f8 = new Abbildung <Integer,Integer>(new RestklassenMenge(4), new RestklassenMenge (4),(t -> (t + 1)%5));
        Abbildung<Tupel<Integer>, Integer> f9 = new Abbildung <>(new TupelMenge <>(new RestklassenMenge(4)), new RestklassenMenge(4),t -> (t.getFirst() * t.getSecond())%4);
        StrukturMitEinerVerknuepfung<Integer> value = new StrukturMitEinerVerknuepfung <>(new RestklassenMenge(4), f9);



        System.out.println(value.isMonoid());

        System.out.println(value.neutralElement);

        System.out.println(value.isGruppe());

        System.out.println(value.isAbelscheGruppe());

        System.out.println(value.isKommutativ());

        System.out.println(value.isHalbgruppe());


        System.out.println(value.getNeutralesElement());

    }
}
