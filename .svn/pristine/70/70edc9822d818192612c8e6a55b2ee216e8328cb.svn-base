package de.uniwue.jpp.javalgebra;

import java.util.HashMap;
import java.util.function.Function;
import java.util.stream.Stream;

public class Abbildung<T,S> {

    private Menge<T> definitionsmenge;
    private Menge<S> zielmenge;
    private Function<T,S> abbVorschrift;
    HashMap<Menge<T>,Menge<S>> hashMap = new HashMap <>();
    public Abbildung(Menge<T> definitionsmenge, Menge<S> zielmenge, Function<T,S> abbVorschrift) {

        this.definitionsmenge = definitionsmenge;
        this.zielmenge = zielmenge;
        this.abbVorschrift = abbVorschrift;
        if (definitionsmenge.getSize().isEmpty() || zielmenge.getSize().isEmpty()){
            throw new IllegalArgumentException("Unendliche Menge");
        }

    }

    public S apply(T t) {
        if (definitionsmenge.contains(t)){
            throw new IllegalArgumentException();
        }
         return abbVorschrift.apply(t);
    }

    public Menge<S> getBildVon(Menge<T> m) {

        throw new UnsupportedOperationException();
    }

    public Menge<T> getUrbildVon(Menge<S> m) {
        throw new UnsupportedOperationException();
    }

    public boolean isInjektiv() {
        throw new UnsupportedOperationException();
    }

    public boolean isSurjektiv() {
        throw new UnsupportedOperationException();
    }

    public boolean isBijektiv() {
        throw new UnsupportedOperationException();
    }

    public Abbildung<S, T> getUmkehrabbildung() {
        throw new UnsupportedOperationException();
    }
}
