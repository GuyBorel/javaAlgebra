package de.uniwue.jpp.javalgebra;

import java.util.List;
import java.util.stream.Collectors;

public class StrukturMitEinerVerknuepfung<T> {

    private Menge<T> menge;
    private Abbildung<Tupel<T>,T> verknuepfung;
    public StrukturMitEinerVerknuepfung(Menge<T> menge, Abbildung<Tupel<T>,T> verknuepfung) {
        if (menge.getSize().isEmpty()){
            throw new IllegalArgumentException("unendliche Menge");
        }
        List<Tupel<T>> listTupel;
        //if (verknuepfung.apply(listTupel))
        this.menge = menge;
        this.verknuepfung = verknuepfung;
    }

    public T apply(T t1, T t2) {
        if (!menge.contains(t1) || !menge.contains(t2)){
            throw new IllegalArgumentException("t1 oder t2 nicht in menge");
        }
        return verknuepfung.apply(new Tupel <>(t1,t2));
    }

    public boolean isHalbgruppe() {
        List<T> tList = menge.getElements().collect(Collectors.toList());

        for (int i = 0; i < menge.getSize().get(); i++) {
            for (int j = i; j < menge.getSize().get() ; j++) {
                for (int k = j; k < menge.getSize().get(); k++) {
                    T a1 = tList.get(i);
                    T a2 = tList.get(j);
                    T a3 = tList.get(k);

                    if (apply(a1,apply(a2,a3)).equals(apply(apply(a1,a2),a3))){
                        return true;
                    }
                }

            }

        }
        return false;
    }

    public boolean isMonoid() {
        throw new UnsupportedOperationException();
    }

    public T getNeutralesElement() {
        if (!isMonoid()){
            throw new UnsupportedOperationException("Struktur kein Monoid");
        }
        return null;
    }

    public boolean isGruppe() {
        throw new UnsupportedOperationException();
    }

    public boolean isKommutativ() {
        throw new UnsupportedOperationException();
    }

    public boolean isAbelscheGruppe() {
        return isGruppe() && isKommutativ();
    }
}
