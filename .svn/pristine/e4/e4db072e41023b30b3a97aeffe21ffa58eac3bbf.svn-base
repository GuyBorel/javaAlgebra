package de.uniwue.jpp.javalgebra;



import de.uniwue.jpp.javalgebra.mengen.RestklassenMenge;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;


public class Abbildung<T,S> {

    private Menge<T> definitionsmenge;
    private Menge<S> zielmenge;
    private Function<T,S> abbVorschrift;
    HashMap<Menge<T>,Menge<S>> hashMap = new HashMap <>();
    public Abbildung(Menge<T> definitionsmenge, Menge<S> zielmenge, Function<T,S> abbVorschrift) {


        if (definitionsmenge.getSize().isEmpty()){
            throw new IllegalArgumentException("definitionsmenge Unendliche Menge");
        }
        if (zielmenge.getSize().isEmpty()){
            throw new IllegalArgumentException("zielMenge undendliche Menge");
        }

        if (definitionsmenge.getElements().anyMatch(n -> !zielmenge.contains(abbVorschrift.apply(n)))){
            throw new IllegalArgumentException("S element ist nicht im zielmenge");
        }
        this.definitionsmenge = definitionsmenge;
        this.zielmenge = zielmenge;
        this.abbVorschrift = abbVorschrift;
    }

    public S apply(T t) {
        if (!definitionsmenge.contains(t)){
            throw new IllegalArgumentException("t nicht in definitionsmenge");
        }
         return abbVorschrift.apply(t);
    }

    public Menge<S> getBildVon(Menge<T> m) {
        List<T> tList = m.getElements().collect(Collectors.toList());
        List<S> sList = new ArrayList <>();
        Menge<S> value = null;
        for (T t : tList) {
            if (!definitionsmenge.contains(t)) {
                throw new IllegalArgumentException("m ist keine Untermenge von definitionsmenge");
            }
            //value = abbVorschrift.apply(t);

            sList.add(abbVorschrift.apply(t));
            value = zielmenge;
        }


        return zielmenge;

    }

    public Menge<T> getUrbildVon(Menge<S> m) {
        List<S> tList = m.getElements().collect(Collectors.toList());
        Menge<T> value = null;
        for (S s:tList) {
            if (!zielmenge.contains(s)){
                throw new IllegalArgumentException("m ist keine untermenge von zielMenge");
            }

            value = definitionsmenge;
        }
        return definitionsmenge;
    }

    public boolean isInjektiv() {

        return zielmenge == definitionsmenge;
    }

    public boolean isSurjektiv() {
        List<T> listT = definitionsmenge.getElements().collect(Collectors.toList());
        for (T t:listT) {
             abbVorschrift.apply(t);
        }
        return zielmenge != definitionsmenge;
    }

    public boolean isBijektiv() {
        return isInjektiv() && isSurjektiv();
    }

    public Abbildung<S, T> getUmkehrabbildung() {

        if (!isBijektiv()) {
            throw new UnsupportedOperationException("Abbildung nicht bijektiv");
        }
        return null;
    }

    public static void main(String[] args) {

        //Relation <String> testString = new Relation <>(() -> Stream.of("oh", "hello", "there"), (o, o2) -> o.equals(o2));
        //System.out.println(testString.getAequivalenzklassen());

        //System.out.println(testString.getElementsInOrder());
        //System.out.println(testString.getElements().collect(Collectors.toList()));


       //Abbildung<Integer, Integer> test = new Abbildung <>(new RestklassenMenge(5), i -> i%2
       // , new RestklassenMenge(5), (integer3, integer4) -> (integer3+1)%5 == integer4);


        //System.out.println(test.getElements().collect(Collectors.toList()));


    }
}
